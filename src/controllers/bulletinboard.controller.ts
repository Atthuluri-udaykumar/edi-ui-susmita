/*
 * Created on 2022-11-21 ( Time 15:41:45 )
 * Generated by Telosys Tools Generator ( version 3.3.0 )
 */

import { NextFunction, Request, Response } from 'express';
import { inject, injectable } from 'inversify';
import { EdiMessage } from '../models/edi-message.model';
import { IBulletinBoardService } from '../services/interfaces/bulletinboard-service.interface';
import { User } from '../types/custom';
import { setErrorResponse, setSuccessResponse } from '../utils/ediresponse.util';
import { loggable } from '../utils/logger.util';
import { Symbols } from '../utils/types';
import { AbstractController } from './abstract-controller';
import { IBulletinBoardController } from './interfaces/bulletinboard-controller.interface';
import { logger } from '../utils/winston.config';
/**
 * CobAcntActvty Controller
 */
@injectable()
export class BulletinBoardController extends AbstractController implements IBulletinBoardController {

     constructor(@inject(Symbols.IBulletinBoardService)  private service: IBulletinBoardService) {
        super();
    }
    
	/**
     * Retrieves the latest BulletinBoard message for all applications
     * @param req, res
     * @return exists response's code status and body
     */
    @loggable(false, false)
    public async getLatestBulletinBoardMessages(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const messages = await this.service.getLatestMessages();
            setSuccessResponse( messages, res);
            
        } catch (error) {
            logger.error( error);
            setErrorResponse(res, error);
        }
    }

    /**
     * Update the latest BulletinBoard message for specific applications
     * @param req, res
     * @return exists response's code status and body
     */
    @loggable(false, false)
    public async updateBulletinBoardMessages(req: Request, res: Response, next: NextFunction): Promise<void> {

        try {
            this.validateReceivedData(req);
            const messages = req.body as EdiMessage[];
            
            await this.service.updateMessages( req.user!, messages);
            setSuccessResponse( messages, res);
            
        } catch (error) {
            logger.error( error);
            setErrorResponse(res, error);
        }
    }
}
