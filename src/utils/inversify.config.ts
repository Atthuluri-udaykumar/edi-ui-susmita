/*
 * Created on 2022-11-29 ( Time 13:09:32 )
 * Generated by Telosys Tools Generator ( version 3.3.0 )
 */
import { Container } from 'inversify';

import { BulletinBoardController } from '../controllers/bulletinboard.controller';
import { IBulletinBoardController } from '../controllers/interfaces/bulletinboard-controller.interface';
import { IBulletinBoardService } from '../services/interfaces/bulletinboard-service.interface';
import { BulletinBoardService } from '../services/bulletinboard-service';

import { Symbols } from './types';
import { IBulletinBoardRepository } from '../repositories/interfaces/bulletinboard-repository.interface';
import { BulletinBoardRepository } from '../repositories/bulletinboard-respository';
import { profile } from './axios.config';
import { BulletinBoardMockRepository } from '../repositories/bulletinboard-mock-respository';
import { IAuthenticationController } from '../controllers/interfaces/authentication-controller.interface';
import { AuthenticationController } from '../controllers/authentication.controller';
import { IAuthenticationService } from '../services/interfaces/authentication-service.interface';
import { AuthenticationService } from '../services/authentication-service';

const container = new Container(); // Initialize the IOC bindings

container.bind<IAuthenticationService>(Symbols.IAuthenticationService).to(AuthenticationService);
container.bind<IAuthenticationController>(Symbols.IAuthenticationController).to(AuthenticationController);

container.bind<IBulletinBoardController>(Symbols.IBulletinBoardController).to(BulletinBoardController);
container.bind<IBulletinBoardService>(Symbols.IBulletinBoardService).to(BulletinBoardService);
if(profile == 'mock') {
    container.bind<IBulletinBoardRepository>(Symbols.IBulletinBoardRepository).to(BulletinBoardMockRepository);
} else {
    container.bind<IBulletinBoardRepository>(Symbols.IBulletinBoardRepository).to(BulletinBoardRepository);
}



export default container;
